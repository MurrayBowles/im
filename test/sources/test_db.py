from datetime import date, datetime

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()

from db import *

engine = create_engine('sqlite:///:memory:')
Base.metadata.create_all(engine)
from sqlalchemy.orm import sessionmaker

Session = sessionmaker(bind=engine)
session = Session()

class _Tester(object):
    ''' classes to test
        class: the class to test
        mk_key: generates a key for create/find
        create: create function (key)
        find: find function (key)
        destroy: parameterless destroy function
        create_deps: list of classes which must exist to test this
        attrs: list of (attr-name string, test function)
        parents: list of (class, attr-name string)
    '''

    def __init__(self):
        self.key = None
        self.obj = None
        self.dep_classes = []
        self.dep_testers = []
        self.dep_objs = []

    def mk_key(self):
        ''' return a new generated key, or None if the key is autogenerated '''
        return None

    def get_key(self, obj):
        ''' return obj's key '''
        return obj.id

    def get_key2(self, obj):
        ''' return obj's secondary key, or None '''
        return None

    def find(self, key):
        # lookup key and return the object found (or None)
        raise NotImplementedError

    def _do_find(self, key):
        #try:
        obj = self.find(key)
        #except:
        #    obj = None
        return obj

    def find2(self, key2):
        # lookup secondary key and return the object found (or None)
        raise NotImplementedError

    def _do_find2(self, key):
        #try:
        obj = self.find2(key)
        #except:
        #    obj = None
        return obj

    def test_deps(self, obj):
        # test the dependency linkage
        pass

    def create(self, key):
        # create and return a new object(DbTextType.URL)ject
        raise NotImplementedError

    def add(self):
        for dep_cls in self.dep_classes:
            dep_tester = dep_cls()
            self.dep_testers.append(dep_tester)
            dep_obj = dep_tester.add()
            self.dep_objs.append(dep_obj)
        key = self.mk_key()
        if key is not None:
            obj = self._do_find(key)
            assert obj is None
        obj = self.create(key)
        assert obj is not None
        session.add(obj)
        session.commit()
        key = self.get_key(obj)
        found_obj = self._do_find(key)
        assert found_obj is obj
        key2 = self.get_key2(obj)
        if key2 is not None:
            found_obj2 = self._do_find2(key2)
            assert found_obj2 is obj
        self.key = key
        self.obj = obj
        self.test_deps(obj)
        return obj

    def delete(self):
        found_obj = self._do_find(self.key)
        assert found_obj is self.obj
        key2 = self.get_key2(self.obj)
        session.delete(self.obj)
        assert self._do_find(self.key) is None
        if key2 is not None:
            assert self._do_find2(key2) is None
        session.commit()
        self.key = None
        self.obj = None
        for dep_tester in self.dep_testers:
            dep_tester.delete()


def _mk_date():
    return date.today()

_name_seq = 0
def _mk_name(base):
    global _name_seq
    _name_seq += 1
    return base + str(_name_seq)


class _DbFolder_Tester(_Tester):

    def create(self, key):
        folder = DbFolder(date=_mk_date(), name=_mk_name('folder'))
        return folder

    def find(self, key):
        return  session.query(DbFolder).filter_by(id=key).first()

    def get_key2(self, obj):
        return (obj.date, obj.name)

    def find2(self, key):
        return session.query(DbFolder).filter_by(
            date=key[0], name=key[1]
        ).first()


class _DbCollection_Tester(_Tester):

    def create(self, key):
        collection = DbCollection(name=_mk_name('collection'))
        return collection

    def find(self, key):
        return  session.query(DbCollection).filter_by(id=key).first()

    def get_key2(self, obj):
        return obj.name

    def find2(self, key):
        return session.query(DbCollection).filter_by(name=key).first()


class _DbImage_Tester(_Tester):

    def __init__(self):
        _Tester.__init__(self)
        self.dep_classes = [_DbFolder_Tester]

    def create(self, key):
        image = DbImage(folder=self.dep_objs[0], name=_mk_name(''))
        return image

    def find(self, key):
        return session.query(DbImage).filter_by(id=key).first()

    def get_key2(self, obj):
        return (obj.folder.date, obj.name)

    def find2(self, key):
        return session.query(DbImage).join(DbImage.folder).filter(
            DbFolder.date == key[0], DbImage.name == key[1]
        ).first()

class _DbTag_Tester(_Tester):

    def create(self, key):
        tag = DbTag(parent=None, name=_mk_name('tag'))
        return tag

    def find(self, key):
        return session.query(DbTag).filter_by(id=key).first()


class _DbTagTree_Tester(_Tester):

    def __init__(self):
        _Tester.__init__(self)
        self.dep_classes = [_DbTag_Tester]

    def create(self, key):
        tag = DbTag(
            parent=self.dep_objs[0], name=_mk_name('tag'))
        return tag

    def find(self, key):
        return session.query(DbTag).filter_by(id=key).first()

    def test_deps(self, obj):
        assert obj.parent is self.dep_objs[0]
        assert self.dep_objs[0].children[0] is obj


class _DbTagReplacement_Tester(_Tester):

    def __init__(self):
        _Tester.__init__(self)
        self.dep_classes = [_DbTag_Tester]

    def create(self, key):
        tag = DbTag(
            parent=None, name=_mk_name('tag'),
            tag_type=DbTagType.REPLACED_BY.value, base_tag=self.dep_objs[0])
        return tag

    def find(self, key):
        return session.query(DbTag).filter_by(id=key).first()

    def test_deps(self, obj):
        assert obj.base_tag is self.dep_objs[0]


class _DbTagFolder_Tester(_Tester):
    def __init__(self):
        _Tester.__init__(self)
        self.dep_classes = [_DbFolder_Tester]

    def create(self, key):
        tag = DbTag(parent=None, name=_mk_name('tag'), items=[self.dep_objs[0]])
        return tag

    def find(self, key):
        return session.query(DbTag).filter_by(id=key).first()

    def test_deps(self, obj):
        assert obj.items[0] is self.dep_objs[0]
        assert self.dep_objs[0].tags[0] is obj

class _DbNoteType_Tester(_Tester):
    def create(self, key):
        note_type = DbNoteType(
            name=_mk_name('notetype'), text_type=DbTextType.TEXT.value)
        return note_type

    def find(self, key):
        return  session.query(DbNoteType).filter_by(id=key).first()


class _DbNote_Tester(_Tester):

    def __init__(self):
        _Tester.__init__(self)
        self.dep_classes = [_DbNoteType_Tester, _DbImage_Tester]

    def mk_key(self):
        return (self.dep_objs[1].id, 1)

    def create(self, key):
        note = DbNote(
            type=self.dep_objs[0],
            item_id=key[0],
            seq=key[1],
            text=_mk_name('text'))
        return note

    def get_key(self, obj):
        return (obj.item.id, obj.seq)

    def find(self, key):
        return session.query(DbNote).filter(
            DbNote.item_id == key[0], DbNote.seq == key[1]
        ).first()

    def test_deps(self, obj):
        assert obj.item is self.dep_objs[1]
        assert obj.item.notes[0] is obj


def test_classes():
    for cls in _Tester.__subclasses__():
        test_obj = cls()
        obj = test_obj.add()
        test_obj.delete()